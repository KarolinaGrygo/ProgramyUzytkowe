>> pi

ans =

    3.1416

>> 100*
??? 100*
        |
Error: Expression or statement is incomplete or incorrect.
 
>> 100*pi

ans =

  314.1593

>> 2/2*3

ans =

     3

>> 7*8;
>> Œrednik zamyka output;
??? Œrednik zamyka output;
    |
Error: The input character is not valid in MATLAB statements or
expressions.
 
>> help sqrt
 SQRT   Square root.
    SQRT(X) is the square root of the elements of X. Complex 
    results are produced if X is not positive.
 
    See also sqrtm, realsqrt, hypot.

    Overloaded methods:
       codistributed/sqrt

    Reference page in Help browser
       doc sqrt

>> sqrt(2,3)
??? Error using ==> sqrt
Too many input arguments.
 
>> help sin
 SIN    Sine of argument in radians.
    SIN(X) is the sine of the elements of X.
 
    See also asin, sind.

    Overloaded methods:
       codistributed/sin

    Reference page in Help browser
       doc sin

>> sind(90)

ans =

     1

>> Sciezka
??? Undefined function or variable 'Sciezka'.
 
>> sciezka;
??? Undefined function or variable 'sciezka'.
 
>> 7*8;
>> 7*8

ans =

    56

>> %cokolwiek
>> sin()
??? Error using ==> sin
Not enough input arguments.
 
>> sin(40)

ans =

    0.7451

>> asin(40)

ans =

   1.5708 - 4.3819i

>> log(2)

ans =

    0.6931

>> log10(2)

ans =

    0.3010

>> sqrt(4)

ans =

     2

>> sqrt(20)

ans =

    4.4721

>> pi

ans =

    3.1416

>> pi*100*sin(40)

ans =

  234.0842

>> %  ÆWICZENIA
>> (1+2^4)/(1/2+sqrt(3))-3

ans =

    4.6163

>> % zad_2
>> (1+1/2345)^2345

ans =

    2.7177

>> %zad_3
>> e
??? Undefined function or variable 'e'.
 
>> %zad_4
>> (1+10/23456)^23456

ans =

  2.1980e+004

>> %zad_5
>> e^10
??? Undefined function or variable 'e'.
 
>> %zad_6
>> sqrt(2,3)
??? Error using ==> sqrt
Too many input arguments.
 
>> help sqrt
 SQRT   Square root.
    SQRT(X) is the square root of the elements of X. Complex 
    results are produced if X is not positive.
 
    See also sqrtm, realsqrt, hypot.

    Overloaded methods:
       codistributed/sqrt

    Reference page in Help browser
       doc sqrt

>> nthroot(2,3)

ans =

    1.2599

>> sqrt(2,3)
??? Error using ==> sqrt
Too many input arguments.
 
>> kwadratowa(0,5,6)
??? Undefined function or method 'kwadratowa' for input arguments of
type 'double'.
 
>> if delta>0
x=1
x=2
end
??? Undefined function or variable 'delta'.
 
>> A=[1,2,3;4,5,6;7,8,9;10,11,12]

A =

     1     2     3
     4     5     6
     7     8     9
    10    11    12

>> 1+2^4/(1/2+sqrt(3))-3

ans =

    5.1683

>> e
??? Undefined function or variable 'e'.
 
>> sqrt(2,3)
??? Error using ==> sqrt
Too many input arguments.
 
>> help sqrt
 SQRT   Square root.
    SQRT(X) is the square root of the elements of X. Complex 
    results are produced if X is not positive.
 
    See also sqrtm, realsqrt, hypot.

    Overloaded methods:
       codistributed/sqrt

    Reference page in Help browser
       doc sqrt

>> nthroot(2,3)

ans =

    1.2599

>> 2^(nthroot(3,3))^pi

ans =

   23.1183

>> exp
??? Error using ==> exp
Not enough input arguments.
 
>> y=exp(-x.^2)

y =

  5.2429e-022

>> y=exp
??? Error using ==> exp
Not enough input arguments.
 
>> format short
>> exp(10)

ans =

  2.2026e+004

>> help format
 FORMAT Set output format.
    FORMAT with no inputs sets the output format to the default appropriate
    for the class of the variable. For float variables, the default is
    FORMAT SHORT.
 
    FORMAT does not affect how MATLAB computations are done. Computations
    on float variables, namely single or double, are done in appropriate
    floating point precision, no matter how those variables are displayed. 
    Computations on integer variables are done natively in integer. Integer
    variables are always displayed to the appropriate number of digits for
    the class, for example, 3 digits to display the INT8 range -128:127.
    FORMAT SHORT and LONG do not affect the display of integer variables.
 
    FORMAT may be used to switch between different output display formats
    of all float variables as follows:
      FORMAT SHORT     Scaled fixed point format with 5 digits.
      FORMAT LONG      Scaled fixed point format with 15 digits for double
                       and 7 digits for single.
      FORMAT SHORTE    Floating point format with 5 digits.
      FORMAT LONGE     Floating point format with 15 digits for double and
                       7 digits for single.
      FORMAT SHORTG    Best of fixed or floating point format with 5 
                       digits.
      FORMAT LONGG     Best of fixed or floating point format with 15 
                       digits for double and 7 digits for single.
      FORMAT SHORTENG  Engineering format that has at least 5 digits
                       and a power that is a multiple of three
      FORMAT LONGENG   Engineering format that has exactly 16 significant
                       digits and a power that is a multiple of three.
 
    FORMAT may be used to switch between different output display formats
    of all numeric variables as follows:
      FORMAT HEX     Hexadecimal format.
      FORMAT +       The symbols +, - and blank are printed 
                     for positive, negative and zero elements.
                     Imaginary parts are ignored.
      FORMAT BANK    Fixed format for dollars and cents.
      FORMAT RAT     Approximation by ratio of small integers.  Numbers
                     with a large numerator or large denominator are
                     replaced by *.
 
    FORMAT may be used to affect the spacing in the display of all
    variables as follows:
      FORMAT COMPACT Suppresses extra line-feeds.
      FORMAT LOOSE   Puts the extra line-feeds back in.
 
    Example:
       format short, pi, single(pi)
    displays both double and single pi with 5 digits as 3.1416 while
       format long, pi, single(pi)
    displays pi as 3.141592653589793 and single(pi) as 3.1415927.
 
       format, intmax('uint64'), realmax
    shows these values as 18446744073709551615 and 1.7977e+308 while
       format hex, intmax('uint64'), realmax
    shows them as ffffffffffffffff and 7fefffffffffffff respectively.
    The HEX display corresponds to the internal representation of the value
    and is not the same as the hexadecimal notation in the C programming
    language.
 
    See also disp, display, isnumeric, isfloat, isinteger.

    Reference page in Help browser
       doc format

>> (23/25)-(23/25)/1.4-(3/(17-27/28))

ans =

    0.0758

>> format pi
??? Error using ==> format
Unknown command option.
 
>> format short, pi

ans =

    3.1416

>> (23/25)-(23/25)/1.4-(3/(17-27/28))

ans =

    0.0758

>> a=nthroot(log(5+sin(8)^2),6)

a =

    1.1017

>> inv(A)
??? Error using ==> inv
Matrix must be square.
 
>> A=[1,2,3;4,5,6;7,8,9;10,11,12]

A =

     1     2     3
     4     5     6
     7     8     9
    10    11    12

>> inv(A)
??? Error using ==> inv
Matrix must be square.
 
>> arctg100000
??? Undefined function or variable 'arctg100000'.
 
>> arctg100000(40)
??? Undefined function or method 'arctg100000' for input
arguments of type 'double'.
 
>> arctg(100000)
??? Undefined function or method 'arctg' for input arguments
of type 'double'.
 
>> help arctg

arctg not found.

Use the Help browser search field to search the documentation, or
type "help help" for help command options, such as help for methods.

>> help arctg100

arctg100 not found.

Use the Help browser search field to search the documentation, or
type "help help" for help command options, such as help for methods.

>> E^E
??? Undefined function or variable 'E'.
 
>> e^e
??? Undefined function or variable 'e'.
 
>> in(-4)
??? Undefined function or method 'in' for input arguments of
type 'double'.
 
>> ln(-4)
??? Undefined function or method 'ln' for input arguments of
type 'double'.
 
>> sqrl(-16)
??? Undefined function or method 'sqrl' for input arguments
of type 'double'.
 
>> sqrl(4)
??? Undefined function or method 'sqrl' for input arguments
of type 'double'.
 
>> help format
 FORMAT Set output format.
    FORMAT with no inputs sets the output format to the default appropriate
    for the class of the variable. For float variables, the default is
    FORMAT SHORT.
 
    FORMAT does not affect how MATLAB computations are done. Computations
    on float variables, namely single or double, are done in appropriate
    floating point precision, no matter how those variables are displayed. 
    Computations on integer variables are done natively in integer. Integer
    variables are always displayed to the appropriate number of digits for
    the class, for example, 3 digits to display the INT8 range -128:127.
    FORMAT SHORT and LONG do not affect the display of integer variables.
 
    FORMAT may be used to switch between different output display formats
    of all float variables as follows:
      FORMAT SHORT     Scaled fixed point format with 5 digits.
      FORMAT LONG      Scaled fixed point format with 15 digits for double
                       and 7 digits for single.
      FORMAT SHORTE    Floating point format with 5 digits.
      FORMAT LONGE     Floating point format with 15 digits for double and
                       7 digits for single.
      FORMAT SHORTG    Best of fixed or floating point format with 5 
                       digits.
      FORMAT LONGG     Best of fixed or floating point format with 15 
                       digits for double and 7 digits for single.
      FORMAT SHORTENG  Engineering format that has at least 5 digits
                       and a power that is a multiple of three
      FORMAT LONGENG   Engineering format that has exactly 16 significant
                       digits and a power that is a multiple of three.
 
    FORMAT may be used to switch between different output display formats
    of all numeric variables as follows:
      FORMAT HEX     Hexadecimal format.
      FORMAT +       The symbols +, - and blank are printed 
                     for positive, negative and zero elements.
                     Imaginary parts are ignored.
      FORMAT BANK    Fixed format for dollars and cents.
      FORMAT RAT     Approximation by ratio of small integers.  Numbers
                     with a large numerator or large denominator are
                     replaced by *.
 
    FORMAT may be used to affect the spacing in the display of all
    variables as follows:
      FORMAT COMPACT Suppresses extra line-feeds.
      FORMAT LOOSE   Puts the extra line-feeds back in.
 
    Example:
       format short, pi, single(pi)
    displays both double and single pi with 5 digits as 3.1416 while
       format long, pi, single(pi)
    displays pi as 3.141592653589793 and single(pi) as 3.1415927.
 
       format, intmax('uint64'), realmax
    shows these values as 18446744073709551615 and 1.7977e+308 while
       format hex, intmax('uint64'), realmax
    shows them as ffffffffffffffff and 7fefffffffffffff respectively.
    The HEX display corresponds to the internal representation of the value
    and is not the same as the hexadecimal notation in the C programming
    language.
 
    See also disp, display, isnumeric, isfloat, isinteger.

    Reference page in Help browser
       doc format

>> format long
>> sqrl(4)
??? Undefined function or method 'sqrl' for input arguments
of type 'double'.
 
>> double
??? Error using ==> double
Not enough input arguments.
 
>> help double
 DOUBLE Convert to double precision.
    DOUBLE(X) returns the double precision value for X.
    If X is already a double precision array, DOUBLE has
    no effect.
 
    DOUBLE is called for the expressions in FOR, IF, and WHILE loops
    if the expression isn't already double precision.  DOUBLE should
    be overloaded for all objects where it makes sense to convert it
    into a double precision value.
 
    See also single, datatypes, isfloat, isnumeric.

    Overloaded methods:
       opaque/double
       codistributed/double
       cvtest/double
       cvdata/double
       rptcp/double
       rptsp/double
       filtstates.double

    Reference page in Help browser
       doc double

>> help format
 FORMAT Set output format.
    FORMAT with no inputs sets the output format to the default appropriate
    for the class of the variable. For float variables, the default is
    FORMAT SHORT.
 
    FORMAT does not affect how MATLAB computations are done. Computations
    on float variables, namely single or double, are done in appropriate
    floating point precision, no matter how those variables are displayed. 
    Computations on integer variables are done natively in integer. Integer
    variables are always displayed to the appropriate number of digits for
    the class, for example, 3 digits to display the INT8 range -128:127.
    FORMAT SHORT and LONG do not affect the display of integer variables.
 
    FORMAT may be used to switch between different output display formats
    of all float variables as follows:
      FORMAT SHORT     Scaled fixed point format with 5 digits.
      FORMAT LONG      Scaled fixed point format with 15 digits for double
                       and 7 digits for single.
      FORMAT SHORTE    Floating point format with 5 digits.
      FORMAT LONGE     Floating point format with 15 digits for double and
                       7 digits for single.
      FORMAT SHORTG    Best of fixed or floating point format with 5 
                       digits.
      FORMAT LONGG     Best of fixed or floating point format with 15 
                       digits for double and 7 digits for single.
      FORMAT SHORTENG  Engineering format that has at least 5 digits
                       and a power that is a multiple of three
      FORMAT LONGENG   Engineering format that has exactly 16 significant
                       digits and a power that is a multiple of three.
 
    FORMAT may be used to switch between different output display formats
    of all numeric variables as follows:
      FORMAT HEX     Hexadecimal format.
      FORMAT +       The symbols +, - and blank are printed 
                     for positive, negative and zero elements.
                     Imaginary parts are ignored.
      FORMAT BANK    Fixed format for dollars and cents.
      FORMAT RAT     Approximation by ratio of small integers.  Numbers
                     with a large numerator or large denominator are
                     replaced by *.
 
    FORMAT may be used to affect the spacing in the display of all
    variables as follows:
      FORMAT COMPACT Suppresses extra line-feeds.
      FORMAT LOOSE   Puts the extra line-feeds back in.
 
    Example:
       format short, pi, single(pi)
    displays both double and single pi with 5 digits as 3.1416 while
       format long, pi, single(pi)
    displays pi as 3.141592653589793 and single(pi) as 3.1415927.
 
       format, intmax('uint64'), realmax
    shows these values as 18446744073709551615 and 1.7977e+308 while
       format hex, intmax('uint64'), realmax
    shows them as ffffffffffffffff and 7fefffffffffffff respectively.
    The HEX display corresponds to the internal representation of the value
    and is not the same as the hexadecimal notation in the C programming
    language.
 
    See also disp, display, isnumeric, isfloat, isinteger.

    Reference page in Help browser
       doc format

>> A=[1,2,3;4,5,6;7,8,9;10,11,12]

A =

     1     2     3
     4     5     6
     7     8     9
    10    11    12

>> 1+2^4/(1/2+sqrt(3))-3

ans =

   5.168295607673468

>> sin(pi/2)

ans =

     1

>> %Zad_0.3.1 zad_1
>> sin(pi/2)

ans =

     1

>> %zad_2
>> cos(60)

ans =

  -0.952412980415156

>> sin(78)

ans =

   0.513978455987535

>> tg(pi/9)
??? Undefined function or method 'tg' for input arguments of
type 'double'.
 
>> tan(pi/9)

ans =

   0.363970234266202

>> log10
??? Input argument "x" is undefined.

Error in ==> log10 at 20
y = log2(x);
 
>> log10(1)

ans =

     0

>> log(10)

ans =

   2.302585092994046

>> tan(89)

ans =

   1.685825370506016